module part5();
	
endmodule



module BCDto7(input [3:0]sw,
				 output [6:0]hex);
	assign hex[0] =  ~(sw[3] | sw[1] | (sw[2] ~^ sw[0]));
	assign hex[1] =  ~(~sw[2] | (sw[0] ~^ sw[1]));
	assign hex[2] =  ~(sw[2] | ~sw[1] | sw[0]);
	assign hex[3] =  ~(~sw[2]&~sw[0] | sw[1]&~sw[0] | sw[2]&~sw[1]&sw[0] | ~sw[2]&sw[1] | sw[3]);
	assign hex[4] =  ~(~sw[2]&~sw[0] | sw[1]&~sw[0]);
	assign hex[5] =  ~(sw[3] | ~sw[1]&~sw[0] | sw[2]&~sw[1] | sw[2]&~sw[0]);
	assign hex[6] =  ~(sw[3] | sw[1]&~sw[0] | sw[2]^sw[1]);
endmodule 

module Bin2BCD(input [7:0]bin,
					output [3:0]BCD0,
					output [3:0]BCD1);
					
	always@(*)
		if (bin[3:0]>9)
			BCD0[3:0] = bin[3:0] + 6;
			BCD1[3:0] = bin[7:4] + 6 + 1;
		else
			BCD0[3:0] = bin[3:0] + 6;
			BCD1[3:0] = bin[7:4] + 6;
					
endmodule

module Dff(input D,
			  input Clk,
			  input Rst,
			  output Q);
	
	always@(posedge Clk or negedge Rst)
	if (~Rst)
		Q=D;
	else
		Q=~D;
	
endmodule 