module part4(input [9:0]SW,
				 input [3:0]KEY,
				 output [6:0]HEX0,
				 output [6:0]HEX1,
				 output [6:0]HEX2,
				 output [6:0]HEX3,
				 output [17:0]SRAM_ADDR,
				 inout [15:0]SRAM_DQ,
				 output SRAM_CE_N,
				 output SRAM_OE_N,
				 output SRAM_WE_N
				 output SRAM_UB_N,
				 output SRAM_LB_N);
				 
	assign SRAM_CE_N = 1'b0;
	
	wire [17:0]address;
	wire [9:0]dataIn,
	wire [9:0]dataOut;
	wire clock;
	
	assign SRAM_LB_N = KEY[0];
	assign SRAM_UB_N = KEY[1];
	assign SRAM_WE_N = KEY[2];
	assign SRAM_OE_N = 1'b0;
	assign clock = KEY[3];
	
	assign dataOut = SRAM_DQ[9:0];
	assign dataIn = SW[9:0];
	assign address[7:0] = SW[7:0];
	assign address[15:8] = SW[7:0];
	
	// KEY[3] as clock, KEY[2] as writeEn, KEY[1:0] as address byte position
	// address will be written only when either of the KEY[1:0] are pressed
	// data will only be written when key[2] is pressed
	// data will be read continously and displayed on seven segments
	
	always@(negedge clock)
	begin
		if (SRAM_WE_N == 0)
			SRAM_DQ[9:0] <= dataIn;
		else if (SRAM_UB_N == 0)
			SRAM_ADDR[15:8] = address[15:8];
		else if (SRAM_LB_N == 0)
			SRAM_ADDR[7:0] = address[7:0];
	end

endmodule
