module part3(input [8:0]SW,
				 input [2:1]KEY,
				 input CLOCK_50,
				 output [6:0]HEX0,
				 output [6:0]HEX1,
				 output [6:0]HEX2);

	Clock_divider toSec(CLOCK_50,32'd50000000,CLOCK_sec);
	Clock_divider toMSec(CLOCK_50,32'd50000,CLOCK_msec);
	count COUNT()
	
	BintoBCD converter(count,[3:0]bcd0,[3:0]bcd1,[3:0]bcd2);
	BCDto7 hex0(bcd0,HEX0);
	BCDto7 hex1(bcd1,HEX1);
	BCDto7 hex2(bcd2,HEX2);
				 
endmodule 

module BCDto7(input [3:0]sw,
				 output [6:0]hex);
				 
	assign hex[0] =  ~(sw[3] | sw[1] | (sw[2] ~^ sw[0]));
	assign hex[1] =  ~(~sw[2] | (sw[0] ~^ sw[1]));
	assign hex[2] =  ~(sw[2] | ~sw[1] | sw[0]);
	assign hex[3] =  ~(~sw[2]&~sw[0] | sw[1]&~sw[0] | sw[2]&~sw[1]&sw[0] | ~sw[2]&sw[1] | sw[3]);
	assign hex[4] =  ~(~sw[2]&~sw[0] | sw[1]&~sw[0]);
	assign hex[5] =  ~(sw[3] | ~sw[1]&~sw[0] | sw[2]&~sw[1] | sw[2]&~sw[0]);
	assign hex[6] =  ~(sw[3] | sw[1]&~sw[0] | sw[2]^sw[1]);
	
endmodule

module BintoBCD(input [11:0]bin,
					 output [3:0]bcd0,bcd1,bcd2);
			
	assign bcd0 = bin%7'd10;
	assign bcd1 = bin/7'd10;
endmodule

module Clock_divider(input clock_in,
							input [31:0]DIVISOR,
							output clock_out);

	reg[31:0] counter=32'd0;
	
	always @(posedge clock_in)
	begin
		counter <= counter + 32'd1;
		if(counter>=(DIVISOR-1))
			counter <= 32'd0;
	end

	assign clock_out = (counter<DIVISOR/2)?1'b0:1'b1;
	
endmodule

module Count(input [7:0]countStart,
					input ClkS,
					input ClkMS,
					input reset,
					output reg [7:0]countSec,
					output reg [11:0]countmSec,
					output reg rollOver = 0);

	always@(posedge ClkS or posedge ClkMS or negedge reset)
	begin
	
		if (reset == 0)
		begin
			countSec <= countStart;
			countmSec <= 1'b0;
		end
		
		if (ClkMS == 1)
		begin
			if (rollOver == 1)
			begin
				countmSec <= countmSec + 1'b1;
			end
		end
		
		if (ClkS == 1)  
		begin
			countSec <= countSec - 1'b1;;
			if (countSec == 0)
				rollOver = 1;
		end
		
	end
				 
endmodule
