module part2();

endmodule

module BCDto7(input [3:0]sw,
				 output [6:0]hex);
				 
	assign hex[0] =  ~(sw[3] | sw[1] | (sw[2] ~^ sw[0]));
	assign hex[1] =  ~(~sw[2] | (sw[0] ~^ sw[1]));
	assign hex[2] =  ~(sw[2] | ~sw[1] | sw[0]);
	assign hex[3] =  ~(~sw[2]&~sw[0] | sw[1]&~sw[0] | sw[2]&~sw[1]&sw[0] | ~sw[2]&sw[1] | sw[3]);
	assign hex[4] =  ~(~sw[2]&~sw[0] | sw[1]&~sw[0]);
	assign hex[5] =  ~(sw[3] | ~sw[1]&~sw[0] | sw[2]&~sw[1] | sw[2]&~sw[0]);
	assign hex[6] =  ~(sw[3] | sw[1]&~sw[0] | sw[2]^sw[1]);
	
endmodule

module Clock_divider(input clock_in,
							output clock_out);

	reg[31:0] counter=32'd0;
	parameter DIVISOR = 32'd50000000;

	always @(posedge clock_in)
	begin
		counter <= counter + 21'd1;
		if(counter>=(DIVISOR-1))
			counter <= 32'd0;
	end

	assign clock_out = (counter<DIVISOR/2)?1'b0:1'b1;
	
endmodule

module count(input [6:0]countEnd,
				 input Clk,
				 input reset,
				 input countInit,
				 output reg [6:0]count);

	count = countInit;			 
				 
endmodule 